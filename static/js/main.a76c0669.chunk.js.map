{"version":3,"sources":["Chat.js","index.js"],"names":["useStyles","makeStyles","root","height","display","flexDirection","justifyContent","backgroundColor","chatCard","width","margin","marginTop","title","fontSize","color","inputContainer","alignItems","marginBottom","padding","inputField","flexGrow","marginRight","borderRadius","Chat","classes","_useState","useState","_useState2","_slicedToArray","userMessage","setUserMessage","_useState3","_useState4","chatMessages","setChatMessages","_useState5","_useState6","isButtonClicked","setIsButtonClicked","chatContainerRef","useRef","fetchBotMessage","useCallback","fetch","concat","then","response","text","data","botMessage","message","isBot","prevChatMessages","_toConsumableArray","slice","catch","error","console","useEffect","current","scrollTop","scrollHeight","formatMessage","split","map","snippet","index","languageMatch","match","language","cleanedSnippet","replace","highlightedSnippet","hljs","highlightAuto","value","_jsxs","style","position","children","_jsx","overflowX","whiteSpace","wordWrap","dangerouslySetInnerHTML","__html","IconButton","top","right","onClick","navigator","clipboard","writeText","FileCopyIcon","className","Card","elevation","CardContent","Typography","align","gutterBottom","overflow","ref","maxWidth","variant","TextField","label","onChange","event","target","autoComplete","autoFocus","multiline","rows","inputProps","resize","InputLabelProps","SendIcon","rootElement","document","getElementById","createRoot","render","StrictMode"],"mappings":"mQAcMA,EAAYC,YAAW,CAC3BC,KAAM,CACJC,OAAQ,QACRC,QAAS,OACTC,cAAe,SACfC,eAAgB,gBAChBC,gBAAiB,WAEnBC,SAAU,CACRC,MAAO,OACPN,OAAQ,OACRO,OAAQ,OACRC,UAAW,EACXJ,gBAAiB,WAEnBK,MAAO,CACLC,SAAU,SACVC,MAAO,WAETC,eAAgB,CACdX,QAAS,OACTY,WAAY,SACZL,UAAW,MACXM,aAAc,KACdC,QAAS,UAEXC,WAAY,CACVC,SAAU,EACVC,YAAa,MACbd,gBAAiB,UACjBe,aAAc,UAqLHC,EAjLF,WACX,IAAMC,EAAUxB,IAChByB,EAAsCC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAA3CI,EAAWF,EAAA,GAAEG,EAAcH,EAAA,GAClCI,EAAwCL,mBAAS,IAAGM,EAAAJ,YAAAG,EAAA,GAA7CE,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GACpCG,EAA8CT,oBAAS,GAAMU,EAAAR,YAAAO,EAAA,GAAtDE,EAAeD,EAAA,GAAEE,EAAkBF,EAAA,GACpCG,EAAmBC,iBAAO,MAkB1BC,EAAkBC,uBAAY,WAClCC,MAAM,6DAADC,OAC0Df,IAE5DgB,MAAK,SAACC,GAAQ,OAAKA,EAASC,MAAM,IAClCF,MAAK,SAACG,GACL,IAAMC,EAAa,CAAEC,QAASF,EAAMG,OAAO,GAC3CjB,GAAgB,SAACkB,GAAgB,SAAAR,OAAAS,YAC5BD,EAAiBE,MAAM,GAAI,IAAE,CAChCL,GAAU,GAEd,IACCM,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAChB,GACJ,GAAG,CAAC3B,IAEJ6B,qBAAU,WACJrB,IACFI,IACAH,GAAmB,GACnBR,EAAe,IAEnB,GAAG,CAACO,EAAiBI,IAErBiB,qBAAU,WACJnB,EAAiBoB,UACnBpB,EAAiBoB,QAAQC,UACvBrB,EAAiBoB,QAAQE,aAE/B,GAAG,CAAC5B,IAEJ,IAAM6B,EAAgB,SAACZ,GACrB,OAAOA,EAAQa,MAAM,OAAOC,KAAI,SAACC,EAASC,GACxC,GAAIA,EAAQ,IAAM,EAAG,CACnB,IAAMC,EAAgBF,EAAQG,MAAM,YAC9BC,EAAWF,EAAgBA,EAAc,GAAK,KAC9CG,EAAiBL,EAAQM,QAAQ,SAAU,IAC3CC,EAAqBC,IAAKC,cAC9BJ,EACAD,EAAW,CAACA,GAAY,MACxBM,MACF,OACEC,eAAA,OAAiBC,MAAO,CAAEC,SAAU,YAAaC,SAAA,CAC/CC,cAAA,OACEH,MAAO,CACLI,UAAW,OACXC,WAAY,WACZC,SAAU,cAEZC,wBAAyB,CAAEC,OAAQb,KAErCQ,cAACM,IAAU,CACTT,MAAO,CACLC,SAAU,WACVS,IAAK,EACLC,MAAO,EACPtE,QAAS,EACTL,SAAU,UAEZ4E,QAAS,WACPC,UAAUC,UAAUC,UAAUtB,EAChC,EAAES,SAEFC,cAACa,IAAY,CAAChF,SAAS,cArBjBqD,EAyBd,CACE,OAAOc,cAAA,QAAAD,SAAmBd,GAARC,EAEtB,GACF,EAEA,OACEU,eAAA,OAAKkB,UAAWtE,EAAQtB,KAAK6E,SAAA,CAC3BC,cAACe,IAAI,CAACD,UAAWtE,EAAQhB,SAAUwF,UAAW,EAAEjB,SAC9CH,eAACqB,IAAW,CAAAlB,SAAA,CACVC,cAACkB,IAAU,CAACJ,UAAWtE,EAAQZ,MAAOuF,MAAM,SAASC,cAAY,EAAArB,SAAC,SAGlEC,cAAA,OACEH,MAAO,CACLzE,QAAS,OACTC,cAAe,SACfF,OAAQ,OACRkG,SAAU,QAEZC,IAAK/D,EAAiBwC,SAErB9C,EAAa+B,KAAI,SAACd,EAASgB,GAAK,OAC/Bc,cAAA,OAEEH,MAAO,CACLzE,QAAS,OACTE,eAAgB,aAChBW,aAAc,OACd8D,SAEFC,cAACe,IAAI,CACHlB,MAAO,CACLpE,MAAO,OACP8F,SAAU,MACVhG,gBAAiB2C,EAAQC,MAAQ,UAAY,WAC7C4B,SAEFC,cAACiB,IAAW,CACVpB,MAAO,CACL3D,QAAS,OACT6D,SAEFC,cAACkB,IAAU,CACTM,QAAQ,QACR3B,MAAO,CAAEhE,SAAU,GAAIC,MAAO,WAAYiE,SAEzCjB,EAAcZ,EAAQA,gBAvBxBgB,EA2BD,WAKdU,eAAA,OAAKkB,UAAWtE,EAAQT,eAAegE,SAAA,CACrCC,cAACyB,IAAS,CACRX,UAAWtE,EAAQL,WACnBuF,MAAM,iBACN/B,MAAO9C,EACP8E,SAjJwB,SAACC,GAC/B9E,EAAe8E,EAAMC,OAAOlC,MAC9B,EAgJQmC,aAAa,MACbC,WAAS,EACTC,WAAS,EACTC,KAAM,EACNC,WAAY,CACVrC,MAAO,CACLwB,SAAU,OACVc,OAAQ,SAGZC,gBAAiB,CACfvC,MAAO,CACL/D,MAAO,YAGX0F,QAAQ,WAEVxB,cAACM,IAAU,CAACxE,MAAM,UAAU2E,QA/JR,WACxB,GAAI5D,EAAa,CACf,IAAMoB,EAAa,CAAEC,QAAS,YAAaC,OAAO,GAClDjB,GAAgB,SAACkB,GAAgB,SAAAR,OAAAS,YAC5BD,GAAgB,CACnB,CAAEF,QAASrB,EAAasB,OAAO,GAC/BF,GAAU,IAEZX,GAAmB,EACrB,CACF,EAqJ6DyC,SACrDC,cAACqC,IAAQ,WAKnB,EC3NMC,EAAcC,SAASC,eAAe,QAC/BC,qBAAWH,GAEnBI,OACH1C,cAAC2C,aAAU,CAAA5C,SACTC,cAACzD,EAAI,M","file":"static/js/main.a76c0669.chunk.js","sourcesContent":["import \"highlight.js/styles/atom-one-dark.css\";\nimport hljs from \"highlight.js\";\nimport React, { useState, useEffect, useCallback, useRef } from \"react\";\nimport {\n  Card,\n  CardContent,\n  TextField,\n  Typography,\n  IconButton\n} from \"@material-ui/core\";\nimport SendIcon from \"@material-ui/icons/Send\";\nimport FileCopyIcon from \"@material-ui/icons/FileCopy\";\nimport { makeStyles } from \"@material-ui/styles\";\n\nconst useStyles = makeStyles({\n  root: {\n    height: \"100vh\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"space-between\",\n    backgroundColor: \"#282c34\"\n  },\n  chatCard: {\n    width: \"100%\",\n    height: \"100%\",\n    margin: \"auto\",\n    marginTop: 0,\n    backgroundColor: \"#282c34\"\n  },\n  title: {\n    fontSize: \"1.5rem\",\n    color: \"#ffffff\"\n  },\n  inputContainer: {\n    display: \"flex\",\n    alignItems: \"center\",\n    marginTop: \"8px\",\n    marginBottom: \"1%\",\n    padding: \"0 16px\"\n  },\n  inputField: {\n    flexGrow: 1,\n    marginRight: \"8px\",\n    backgroundColor: \"#ffffff\",\n    borderRadius: \"25px\"\n  }\n});\n\nconst Chat = () => {\n  const classes = useStyles();\n  const [userMessage, setUserMessage] = useState(\"\");\n  const [chatMessages, setChatMessages] = useState([]);\n  const [isButtonClicked, setIsButtonClicked] = useState(false);\n  const chatContainerRef = useRef(null);\n\n  const handleUserMessageChange = (event) => {\n    setUserMessage(event.target.value);\n  };\n\n  const handleSendMessage = () => {\n    if (userMessage) {\n      const botMessage = { message: \"Typing...\", isBot: true };\n      setChatMessages((prevChatMessages) => [\n        ...prevChatMessages,\n        { message: userMessage, isBot: false },\n        botMessage\n      ]);\n      setIsButtonClicked(true);\n    }\n  };\n\n  const fetchBotMessage = useCallback(() => {\n    fetch(\n      `https://walrus-app-hodhq.ondigitalocean.app/androidJava?q=${userMessage}`\n    )\n      .then((response) => response.text())\n      .then((data) => {\n        const botMessage = { message: data, isBot: true };\n        setChatMessages((prevChatMessages) => [\n          ...prevChatMessages.slice(0, -1),\n          botMessage\n        ]);\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  }, [userMessage]);\n\n  useEffect(() => {\n    if (isButtonClicked) {\n      fetchBotMessage();\n      setIsButtonClicked(false);\n      setUserMessage(\"\");\n    }\n  }, [isButtonClicked, fetchBotMessage]);\n\n  useEffect(() => {\n    if (chatContainerRef.current) {\n      chatContainerRef.current.scrollTop =\n        chatContainerRef.current.scrollHeight;\n    }\n  }, [chatMessages]);\n\n  const formatMessage = (message) => {\n    return message.split(\"```\").map((snippet, index) => {\n      if (index % 2 === 1) {\n        const languageMatch = snippet.match(/^(\\w+)\\n/);\n        const language = languageMatch ? languageMatch[1] : null;\n        const cleanedSnippet = snippet.replace(/^\\w+\\n/, \"\");\n        const highlightedSnippet = hljs.highlightAuto(\n          cleanedSnippet,\n          language ? [language] : null\n        ).value;\n        return (\n          <div key={index} style={{ position: \"relative\" }}>\n            <pre\n              style={{\n                overflowX: \"auto\",\n                whiteSpace: \"pre-wrap\",\n                wordWrap: \"break-word\"\n              }}\n              dangerouslySetInnerHTML={{ __html: highlightedSnippet }}\n            ></pre>\n            <IconButton\n              style={{\n                position: \"absolute\",\n                top: 0,\n                right: 0,\n                padding: 0,\n                fontSize: \"0.8rem\"\n              }}\n              onClick={() => {\n                navigator.clipboard.writeText(cleanedSnippet);\n              }}\n            >\n              <FileCopyIcon fontSize=\"small\" />\n            </IconButton>\n          </div>\n        );\n      } else {\n        return <span key={index}>{snippet}</span>;\n      }\n    });\n  };\n\n  return (\n    <div className={classes.root}>\n      <Card className={classes.chatCard} elevation={0}>\n        <CardContent>\n          <Typography className={classes.title} align=\"center\" gutterBottom>\n            Riya\n          </Typography>\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"column\",\n              height: \"60vh\",\n              overflow: \"auto\"\n            }}\n            ref={chatContainerRef}\n          >\n            {chatMessages.map((message, index) => (\n              <div\n                key={index}\n                style={{\n                  display: \"flex\",\n                  justifyContent: \"flex-start\",\n                  marginBottom: \"8px\"\n                }}\n              >\n                <Card\n                  style={{\n                    width: \"auto\",\n                    maxWidth: \"85%\",\n                    backgroundColor: message.isBot ? \"#4b4f56\" : \"#3b3e44\"\n                  }}\n                >\n                  <CardContent\n                    style={{\n                      padding: \"5px\"\n                    }}\n                  >\n                    <Typography\n                      variant=\"body1\"\n                      style={{ fontSize: 14, color: \"#ffffff\" }}\n                    >\n                      {formatMessage(message.message)}\n                    </Typography>\n                  </CardContent>\n                </Card>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n      <div className={classes.inputContainer}>\n        <TextField\n          className={classes.inputField}\n          label=\"Type a message\"\n          value={userMessage}\n          onChange={handleUserMessageChange}\n          autoComplete=\"off\"\n          autoFocus\n          multiline\n          rows={1}\n          inputProps={{\n            style: {\n              overflow: \"auto\",\n              resize: \"none\"\n            }\n          }}\n          InputLabelProps={{\n            style: {\n              color: \"#000000\"\n            }\n          }}\n          variant=\"filled\"\n        />\n        <IconButton color=\"primary\" onClick={handleSendMessage}>\n          <SendIcon />\n        </IconButton>\n      </div>\n    </div>\n  );\n};\nexport default Chat;\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport Chat from \"./Chat\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <Chat />\n  </StrictMode>\n);\n"],"sourceRoot":""}